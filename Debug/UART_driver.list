
UART_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000086c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800099c  0800099c  0001099c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009b4  080009b4  000109bc  2**0
                  CONTENTS
  4 .ARM          00000000  080009b4  080009b4  000109bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009b4  080009bc  000109bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009b4  080009b4  000109b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009b8  080009b8  000109b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000000  080009bc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080009bc  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000109bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003244  00000000  00000000  000109e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007c2  00000000  00000000  00013c29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000734  00000000  00000000  000143eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000150  00000000  00000000  00014b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000108  00000000  00000000  00014c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000020d5  00000000  00000000  00014d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000192c  00000000  00000000  00016e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008b6a  00000000  00000000  00018779  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000212e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003e0  00000000  00000000  00021360  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000984 	.word	0x08000984

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000984 	.word	0x08000984

08000170 <Clock_Init>:


unsigned char ch;

void Clock_Init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable Clock
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <Clock_Init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <Clock_Init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <Clock_Init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <Clock_Init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <Clock_Init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <Clock_Init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <N_CallBack>:

void N_CallBack(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	UART_MCAL_Recieve_Data(USART1, &ch, Disable);
 80001a8:	2201      	movs	r2, #1
 80001aa:	4905      	ldr	r1, [pc, #20]	; (80001c0 <N_CallBack+0x1c>)
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <N_CallBack+0x20>)
 80001ae:	f000 fa89 	bl	80006c4 <UART_MCAL_Recieve_Data>
	UART_MCAL_Send_Data(USART1, &ch, Disable);
 80001b2:	2201      	movs	r2, #1
 80001b4:	4902      	ldr	r1, [pc, #8]	; (80001c0 <N_CallBack+0x1c>)
 80001b6:	4803      	ldr	r0, [pc, #12]	; (80001c4 <N_CallBack+0x20>)
 80001b8:	f000 fa68 	bl	800068c <UART_MCAL_Send_Data>

}
 80001bc:	bf00      	nop
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000020 	.word	0x20000020
 80001c4:	40013800 	.word	0x40013800

080001c8 <main>:




int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0



	USART_Config uartCFG;
	Clock_Init();
 80001ce:	f7ff ffcf 	bl	8000170 <Clock_Init>
	uartCFG.BaudRate = USART_BaudRate_115200;
 80001d2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001d6:	60bb      	str	r3, [r7, #8]
	uartCFG.HW_FlowCtrl = USART_HW_FlowCtrl_NONE;
 80001d8:	2300      	movs	r3, #0
 80001da:	73fb      	strb	r3, [r7, #15]
	uartCFG.IRQ_Enable = USART_IRQ_Enable_RXNE;
 80001dc:	2320      	movs	r3, #32
 80001de:	743b      	strb	r3, [r7, #16]
	uartCFG.P_IRQ_Call_Back = N_CallBack;
 80001e0:	4b09      	ldr	r3, [pc, #36]	; (8000208 <main+0x40>)
 80001e2:	617b      	str	r3, [r7, #20]
	uartCFG.Parity = USART_Parity_NONE;
 80001e4:	2300      	movs	r3, #0
 80001e6:	737b      	strb	r3, [r7, #13]
	uartCFG.PayLoad_Length = USART_PayLoad_Length_8B;
 80001e8:	2300      	movs	r3, #0
 80001ea:	733b      	strb	r3, [r7, #12]
	uartCFG.Stop_Length = USART_StopBits_1;
 80001ec:	2300      	movs	r3, #0
 80001ee:	73bb      	strb	r3, [r7, #14]
	uartCFG.USART_MODE = USART_MODE_TX_RX;
 80001f0:	230c      	movs	r3, #12
 80001f2:	713b      	strb	r3, [r7, #4]

	UART_MCAL_Init(USART1, &uartCFG);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <main+0x44>)
 80001fa:	f000 f96b 	bl	80004d4 <UART_MCAL_Init>
	UART_MCAL_GPIO_Set_Pins(USART1);
 80001fe:	4803      	ldr	r0, [pc, #12]	; (800020c <main+0x44>)
 8000200:	f000 fa92 	bl	8000728 <UART_MCAL_GPIO_Set_Pins>





	while(1)
 8000204:	e7fe      	b.n	8000204 <main+0x3c>
 8000206:	bf00      	nop
 8000208:	080001a5 	.word	0x080001a5
 800020c:	40013800 	.word	0x40013800

08000210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000210:	480d      	ldr	r0, [pc, #52]	; (8000248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000212:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000214:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000218:	480c      	ldr	r0, [pc, #48]	; (800024c <LoopForever+0x6>)
  ldr r1, =_edata
 800021a:	490d      	ldr	r1, [pc, #52]	; (8000250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800021c:	4a0d      	ldr	r2, [pc, #52]	; (8000254 <LoopForever+0xe>)
  movs r3, #0
 800021e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000220:	e002      	b.n	8000228 <LoopCopyDataInit>

08000222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000226:	3304      	adds	r3, #4

08000228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800022c:	d3f9      	bcc.n	8000222 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800022e:	4a0a      	ldr	r2, [pc, #40]	; (8000258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000230:	4c0a      	ldr	r4, [pc, #40]	; (800025c <LoopForever+0x16>)
  movs r3, #0
 8000232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000234:	e001      	b.n	800023a <LoopFillZerobss>

08000236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000238:	3204      	adds	r2, #4

0800023a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800023c:	d3fb      	bcc.n	8000236 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800023e:	f000 fb7d 	bl	800093c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000242:	f7ff ffc1 	bl	80001c8 <main>

08000246 <LoopForever>:

LoopForever:
    b LoopForever
 8000246:	e7fe      	b.n	8000246 <LoopForever>
  ldr   r0, =_estack
 8000248:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800024c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000250:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000254:	080009bc 	.word	0x080009bc
  ldr r2, =_sbss
 8000258:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800025c:	2000002c 	.word	0x2000002c

08000260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000260:	e7fe      	b.n	8000260 <ADC1_2_IRQHandler>

08000262 <Get_CRLH_Position>:
 */

#include"Stm32_F103C6_Gpio_driver.h"
//based on pin number get the position at the register (CRL || CRH ) to write its modes
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000262:	b480      	push	{r7}
 8000264:	b083      	sub	sp, #12
 8000266:	af00      	add	r7, sp, #0
 8000268:	4603      	mov	r3, r0
 800026a:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800026c:	88fb      	ldrh	r3, [r7, #6]
 800026e:	2b80      	cmp	r3, #128	; 0x80
 8000270:	d042      	beq.n	80002f8 <Get_CRLH_Position+0x96>
 8000272:	2b80      	cmp	r3, #128	; 0x80
 8000274:	dc11      	bgt.n	800029a <Get_CRLH_Position+0x38>
 8000276:	2b08      	cmp	r3, #8
 8000278:	d036      	beq.n	80002e8 <Get_CRLH_Position+0x86>
 800027a:	2b08      	cmp	r3, #8
 800027c:	dc06      	bgt.n	800028c <Get_CRLH_Position+0x2a>
 800027e:	2b02      	cmp	r3, #2
 8000280:	d02e      	beq.n	80002e0 <Get_CRLH_Position+0x7e>
 8000282:	2b04      	cmp	r3, #4
 8000284:	d02e      	beq.n	80002e4 <Get_CRLH_Position+0x82>
 8000286:	2b01      	cmp	r3, #1
 8000288:	d028      	beq.n	80002dc <Get_CRLH_Position+0x7a>
 800028a:	e047      	b.n	800031c <Get_CRLH_Position+0xba>
 800028c:	2b20      	cmp	r3, #32
 800028e:	d02f      	beq.n	80002f0 <Get_CRLH_Position+0x8e>
 8000290:	2b40      	cmp	r3, #64	; 0x40
 8000292:	d02f      	beq.n	80002f4 <Get_CRLH_Position+0x92>
 8000294:	2b10      	cmp	r3, #16
 8000296:	d029      	beq.n	80002ec <Get_CRLH_Position+0x8a>
 8000298:	e040      	b.n	800031c <Get_CRLH_Position+0xba>
 800029a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800029e:	d033      	beq.n	8000308 <Get_CRLH_Position+0xa6>
 80002a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80002a4:	dc09      	bgt.n	80002ba <Get_CRLH_Position+0x58>
 80002a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002aa:	d029      	beq.n	8000300 <Get_CRLH_Position+0x9e>
 80002ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80002b0:	d028      	beq.n	8000304 <Get_CRLH_Position+0xa2>
 80002b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002b6:	d021      	beq.n	80002fc <Get_CRLH_Position+0x9a>
 80002b8:	e030      	b.n	800031c <Get_CRLH_Position+0xba>
 80002ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80002be:	d027      	beq.n	8000310 <Get_CRLH_Position+0xae>
 80002c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80002c4:	dc03      	bgt.n	80002ce <Get_CRLH_Position+0x6c>
 80002c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002ca:	d01f      	beq.n	800030c <Get_CRLH_Position+0xaa>
 80002cc:	e026      	b.n	800031c <Get_CRLH_Position+0xba>
 80002ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80002d2:	d01f      	beq.n	8000314 <Get_CRLH_Position+0xb2>
 80002d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80002d8:	d01e      	beq.n	8000318 <Get_CRLH_Position+0xb6>
 80002da:	e01f      	b.n	800031c <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	e01e      	b.n	800031e <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 80002e0:	2304      	movs	r3, #4
 80002e2:	e01c      	b.n	800031e <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 80002e4:	2308      	movs	r3, #8
 80002e6:	e01a      	b.n	800031e <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 80002e8:	230c      	movs	r3, #12
 80002ea:	e018      	b.n	800031e <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 80002ec:	2310      	movs	r3, #16
 80002ee:	e016      	b.n	800031e <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 80002f0:	2314      	movs	r3, #20
 80002f2:	e014      	b.n	800031e <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 80002f4:	2318      	movs	r3, #24
 80002f6:	e012      	b.n	800031e <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 80002f8:	231c      	movs	r3, #28
 80002fa:	e010      	b.n	800031e <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	e00e      	b.n	800031e <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 8000300:	2304      	movs	r3, #4
 8000302:	e00c      	b.n	800031e <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 8000304:	2308      	movs	r3, #8
 8000306:	e00a      	b.n	800031e <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 8000308:	230c      	movs	r3, #12
 800030a:	e008      	b.n	800031e <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 800030c:	2310      	movs	r3, #16
 800030e:	e006      	b.n	800031e <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 8000310:	2314      	movs	r3, #20
 8000312:	e004      	b.n	800031e <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 8000314:	2318      	movs	r3, #24
 8000316:	e002      	b.n	800031e <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 8000318:	231c      	movs	r3, #28
 800031a:	e000      	b.n	800031e <Get_CRLH_Position+0xbc>
		break;
	default:
		return 0;
 800031c:	2300      	movs	r3, #0
		break;

	}
}
 800031e:	4618      	mov	r0, r3
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr

08000328 <MCAL_GPIO_Init>:
 * note -                   -stmf103c6 MCU has GPIO A,B,C,D,E Modules
 *                           but LQFP48 Package has only GPIO A,B, Part of C/D exported external pins
 */
/**================================================================= */
void MCAL_GPIO_Init (GPIO_Typedef* GPIOX ,GPIO_PIN_Configer_t* PinConfig)
{
 8000328:	b590      	push	{r4, r7, lr}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	6039      	str	r1, [r7, #0]
	//To Init Any Pins Must Write On Port configuration register low (GPIOx_CRL) 0>>>7
	//Or register low (GPIOx_CRH) 8>>>15
	//We Determine The Position Should Write On It In  configuration register By Determine First Position Pin from "Get_CRLH_Position" function

	volatile uint32_t *ConfigureRegister = NULL;
 8000332:	2300      	movs	r3, #0
 8000334:	60bb      	str	r3, [r7, #8]
	uint8_t   ConfigurePin=0;     //In This Variable We Store The Configure Pin
 8000336:	2300      	movs	r3, #0
 8000338:	73fb      	strb	r3, [r7, #15]
	ConfigureRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH ; // to take the address of CRL or CRH and store it in ConfigureRegister
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	2bff      	cmp	r3, #255	; 0xff
 8000340:	d801      	bhi.n	8000346 <MCAL_GPIO_Init+0x1e>
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	e001      	b.n	800034a <MCAL_GPIO_Init+0x22>
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	3304      	adds	r3, #4
 800034a:	60bb      	str	r3, [r7, #8]

	//Clear CNF & MODE for this pin only (0xf = 1111)
	*(ConfigureRegister) &= ~(0xf<<Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	881b      	ldrh	r3, [r3, #0]
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff86 	bl	8000262 <Get_CRLH_Position>
 8000356:	4603      	mov	r3, r0
 8000358:	461a      	mov	r2, r3
 800035a:	230f      	movs	r3, #15
 800035c:	4093      	lsls	r3, r2
 800035e:	43da      	mvns	r2, r3
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	401a      	ands	r2, r3
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	601a      	str	r2, [r3, #0]
	if (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP || PinConfig->GPIO_MODE ==GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE ==GPIO_MODE_OUTPUT_AF_PP || PinConfig->GPIO_MODE ==GPIO_MODE_OUTPUT_AF_OD)
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	789b      	ldrb	r3, [r3, #2]
 800036e:	2b04      	cmp	r3, #4
 8000370:	d00b      	beq.n	800038a <MCAL_GPIO_Init+0x62>
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	789b      	ldrb	r3, [r3, #2]
 8000376:	2b05      	cmp	r3, #5
 8000378:	d007      	beq.n	800038a <MCAL_GPIO_Init+0x62>
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	789b      	ldrb	r3, [r3, #2]
 800037e:	2b06      	cmp	r3, #6
 8000380:	d003      	beq.n	800038a <MCAL_GPIO_Init+0x62>
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	789b      	ldrb	r3, [r3, #2]
 8000386:	2b07      	cmp	r3, #7
 8000388:	d10e      	bne.n	80003a8 <MCAL_GPIO_Init+0x80>
		{

			//I sure The User Want Make The Pin As Output & in Case Output Should Configure Mode(Speed) & CNF(State)
			ConfigurePin = ((( (PinConfig->GPIO_MODE - 4)<<2) |(PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f); //Shift 2 to Set The CNF Bits
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	789b      	ldrb	r3, [r3, #2]
 800038e:	3b04      	subs	r3, #4
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	b25a      	sxtb	r2, r3
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	78db      	ldrb	r3, [r3, #3]
 8000398:	b25b      	sxtb	r3, r3
 800039a:	4313      	orrs	r3, r2
 800039c:	b25b      	sxtb	r3, r3
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	f003 030f 	and.w	r3, r3, #15
 80003a4:	73fb      	strb	r3, [r7, #15]
 80003a6:	e029      	b.n	80003fc <MCAL_GPIO_Init+0xd4>

		}

	else  //I sure The User Want Make The Pin As Input & in Case input Should Configure Mode(Speed)=00 & CNF(State)
		{
			if (PinConfig->GPIO_MODE == GPIO_MODE_Analog ||PinConfig->GPIO_MODE ==GPIO_MODE_INPUT_FLO ||  PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	789b      	ldrb	r3, [r3, #2]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d007      	beq.n	80003c0 <MCAL_GPIO_Init+0x98>
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	789b      	ldrb	r3, [r3, #2]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d003      	beq.n	80003c0 <MCAL_GPIO_Init+0x98>
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	789b      	ldrb	r3, [r3, #2]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d107      	bne.n	80003d0 <MCAL_GPIO_Init+0xa8>
			{
				ConfigurePin= (( ((PinConfig->GPIO_MODE )<<2) | 0x0) & 0x0f);
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	789b      	ldrb	r3, [r3, #2]
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	f003 030f 	and.w	r3, r3, #15
 80003cc:	73fb      	strb	r3, [r7, #15]
 80003ce:	e015      	b.n	80003fc <MCAL_GPIO_Init+0xd4>
			}
			else  //PullUp Or PullDown
			{
				ConfigurePin= (( ((GPIO_MODE_INPUT_PU)<<2) | 0x0) & 0x0f);
 80003d0:	2308      	movs	r3, #8
 80003d2:	73fb      	strb	r3, [r7, #15]
				if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	789b      	ldrb	r3, [r3, #2]
 80003d8:	2b02      	cmp	r3, #2
 80003da:	d107      	bne.n	80003ec <MCAL_GPIO_Init+0xc4>
				{
					GPIOX->ODR |= PinConfig->GPIO_PinNumber;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	683a      	ldr	r2, [r7, #0]
 80003e2:	8812      	ldrh	r2, [r2, #0]
 80003e4:	431a      	orrs	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	60da      	str	r2, [r3, #12]
 80003ea:	e007      	b.n	80003fc <MCAL_GPIO_Init+0xd4>
				}
				else
				{
					GPIOX->ODR &= ~(PinConfig->GPIO_PinNumber);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	683a      	ldr	r2, [r7, #0]
 80003f2:	8812      	ldrh	r2, [r2, #0]
 80003f4:	43d2      	mvns	r2, r2
 80003f6:	401a      	ands	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	60da      	str	r2, [r3, #12]
				}
			}
		}
	//Write On CRH Or CLH
	*(ConfigureRegister) |=( ConfigurePin << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80003fc:	7bfc      	ldrb	r4, [r7, #15]
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	881b      	ldrh	r3, [r3, #0]
 8000402:	4618      	mov	r0, r3
 8000404:	f7ff ff2d 	bl	8000262 <Get_CRLH_Position>
 8000408:	4603      	mov	r3, r0
 800040a:	fa04 f203 	lsl.w	r2, r4, r3
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	431a      	orrs	r2, r3
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	601a      	str	r2, [r3, #0]

}
 8000418:	bf00      	nop
 800041a:	3714      	adds	r7, #20
 800041c:	46bd      	mov	sp, r7
 800041e:	bd90      	pop	{r4, r7, pc}

08000420 <MCAL_RCC_GetSys_freq>:
	1101: SYSCLK divided by 128
	1110: SYSCLK divided by 256
	1111: SYSCLK divided by 512*/
const uint8_t AHBPreSctable [16U]= {0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};
uint32_t MCAL_RCC_GetSys_freq(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
		System is enabled).
		00: HSI selected as system clock
		01: HSE selected as system clock
		10: PLL selected as system clock
		11: not allowed*/
	switch ((RCC->CFGR>>2) & 0b11)
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <MCAL_RCC_GetSys_freq+0x30>)
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	089b      	lsrs	r3, r3, #2
 800042a:	f003 0303 	and.w	r3, r3, #3
 800042e:	2b01      	cmp	r3, #1
 8000430:	d006      	beq.n	8000440 <MCAL_RCC_GetSys_freq+0x20>
 8000432:	2b01      	cmp	r3, #1
 8000434:	d302      	bcc.n	800043c <MCAL_RCC_GetSys_freq+0x1c>
 8000436:	2b02      	cmp	r3, #2
 8000438:	d004      	beq.n	8000444 <MCAL_RCC_GetSys_freq+0x24>
 800043a:	e005      	b.n	8000448 <MCAL_RCC_GetSys_freq+0x28>
	{
	case 0:
		return HSI_RC_CLK;
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <MCAL_RCC_GetSys_freq+0x34>)
 800043e:	e003      	b.n	8000448 <MCAL_RCC_GetSys_freq+0x28>
		break;
	case 1 :
		return HSE_CLK;  //need to be calculated again
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <MCAL_RCC_GetSys_freq+0x38>)
 8000442:	e001      	b.n	8000448 <MCAL_RCC_GetSys_freq+0x28>
		break;
	case 2 :
		return 16000000; //need to be calculated again
 8000444:	4b04      	ldr	r3, [pc, #16]	; (8000458 <MCAL_RCC_GetSys_freq+0x38>)
 8000446:	e7ff      	b.n	8000448 <MCAL_RCC_GetSys_freq+0x28>
		break;
	}


}
 8000448:	4618      	mov	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000
 8000454:	007a1200 	.word	0x007a1200
 8000458:	00f42400 	.word	0x00f42400

0800045c <MCAL_RCC_GetHCLK_freq>:
uint32_t MCAL_RCC_GetHCLK_freq(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
		1100: SYSCLK divided by 64
		1101: SYSCLK divided by 128
		1110: SYSCLK divided by 256
		1111: SYSCLK divided by 512*/
	//bit 4: 7 of cfgr give me the prescaler of the hcl (ahb prescaler)
	 return (MCAL_RCC_GetSys_freq()>>AHBPreSctable[(RCC->CFGR>>4) & 0xf] );
 8000460:	f7ff ffde 	bl	8000420 <MCAL_RCC_GetSys_freq>
 8000464:	4601      	mov	r1, r0
 8000466:	4b05      	ldr	r3, [pc, #20]	; (800047c <MCAL_RCC_GetHCLK_freq+0x20>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	091b      	lsrs	r3, r3, #4
 800046c:	f003 030f 	and.w	r3, r3, #15
 8000470:	4a03      	ldr	r2, [pc, #12]	; (8000480 <MCAL_RCC_GetHCLK_freq+0x24>)
 8000472:	5cd3      	ldrb	r3, [r2, r3]
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000478:	4618      	mov	r0, r3
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40021000 	.word	0x40021000
 8000480:	080009a4 	.word	0x080009a4

08000484 <MCAL_RCC_GetPCLK1_freq>:
uint32_t MCAL_RCC_GetPCLK1_freq(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/
	//bit 8 : 10 of cfgr give me the prescaler of the clock1
	 return (MCAL_RCC_GetHCLK_freq()>>APBPreSctable[(RCC->CFGR>>8) & 0b111] );
 8000488:	f7ff ffe8 	bl	800045c <MCAL_RCC_GetHCLK_freq>
 800048c:	4601      	mov	r1, r0
 800048e:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <MCAL_RCC_GetPCLK1_freq+0x20>)
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	0a1b      	lsrs	r3, r3, #8
 8000494:	f003 0307 	and.w	r3, r3, #7
 8000498:	4a03      	ldr	r2, [pc, #12]	; (80004a8 <MCAL_RCC_GetPCLK1_freq+0x24>)
 800049a:	5cd3      	ldrb	r3, [r2, r3]
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40021000 	.word	0x40021000
 80004a8:	0800099c 	.word	0x0800099c

080004ac <MCAL_RCC_GetPCLK2_freq>:
uint32_t MCAL_RCC_GetPCLK2_freq(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/
	//bit 11 :13  of cfgr give me the prescaler of the clock2
	 return (MCAL_RCC_GetHCLK_freq()>>APBPreSctable[(RCC->CFGR>>11) & 0b111] );
 80004b0:	f7ff ffd4 	bl	800045c <MCAL_RCC_GetHCLK_freq>
 80004b4:	4601      	mov	r1, r0
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <MCAL_RCC_GetPCLK2_freq+0x20>)
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	0adb      	lsrs	r3, r3, #11
 80004bc:	f003 0307 	and.w	r3, r3, #7
 80004c0:	4a03      	ldr	r2, [pc, #12]	; (80004d0 <MCAL_RCC_GetPCLK2_freq+0x24>)
 80004c2:	5cd3      	ldrb	r3, [r2, r3]
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40021000 	.word	0x40021000
 80004d0:	0800099c 	.word	0x0800099c

080004d4 <UART_MCAL_Init>:
 *
 */
/**================================================================= */

void UART_MCAL_Init(USART_Typedef * USARTx ,USART_Config * USART_Config)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]

	GP_USART_Config = USART_Config ;
 80004de:	4a62      	ldr	r2, [pc, #392]	; (8000668 <UART_MCAL_Init+0x194>)
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	6013      	str	r3, [r2, #0]

	//Enable Clock For Given USART Peripheral
	if (USARTx == USART1)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a61      	ldr	r2, [pc, #388]	; (800066c <UART_MCAL_Init+0x198>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d106      	bne.n	80004fa <UART_MCAL_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 80004ec:	4b60      	ldr	r3, [pc, #384]	; (8000670 <UART_MCAL_Init+0x19c>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a5f      	ldr	r2, [pc, #380]	; (8000670 <UART_MCAL_Init+0x19c>)
 80004f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	e014      	b.n	8000524 <UART_MCAL_Init+0x50>
	}
	else if (USARTx == USART2)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a5d      	ldr	r2, [pc, #372]	; (8000674 <UART_MCAL_Init+0x1a0>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d106      	bne.n	8000510 <UART_MCAL_Init+0x3c>
	{
		RCC_USART2_CLK_EN();
 8000502:	4b5b      	ldr	r3, [pc, #364]	; (8000670 <UART_MCAL_Init+0x19c>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	4a5a      	ldr	r2, [pc, #360]	; (8000670 <UART_MCAL_Init+0x19c>)
 8000508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800050c:	61d3      	str	r3, [r2, #28]
 800050e:	e009      	b.n	8000524 <UART_MCAL_Init+0x50>
	}
	else if (USARTx == USART3)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a59      	ldr	r2, [pc, #356]	; (8000678 <UART_MCAL_Init+0x1a4>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d105      	bne.n	8000524 <UART_MCAL_Init+0x50>
	{
		RCC_USART3_CLK_EN();
 8000518:	4b55      	ldr	r3, [pc, #340]	; (8000670 <UART_MCAL_Init+0x19c>)
 800051a:	69db      	ldr	r3, [r3, #28]
 800051c:	4a54      	ldr	r2, [pc, #336]	; (8000670 <UART_MCAL_Init+0x19c>)
 800051e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000522:	61d3      	str	r3, [r2, #28]
	}


	//Enable UART Module Bit 13 UE: USART enable
	USARTx->CR1 |=(1<<13);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	60da      	str	r2, [r3, #12]

	//Enable TX RX according to the USART_MODE configuration item
	USARTx->CR1 |= USART_Config->USART_MODE;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	683a      	ldr	r2, [r7, #0]
 8000536:	7812      	ldrb	r2, [r2, #0]
 8000538:	431a      	orrs	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	60da      	str	r2, [r3, #12]

	//PayLoad Length
	USARTx->CR1 |= USART_Config->PayLoad_Length;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	683a      	ldr	r2, [r7, #0]
 8000544:	7a12      	ldrb	r2, [r2, #8]
 8000546:	431a      	orrs	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	60da      	str	r2, [r3, #12]

	//BaudRate
	USARTx->CR1 |= USART_Config->BaudRate;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	68da      	ldr	r2, [r3, #12]
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	431a      	orrs	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	60da      	str	r2, [r3, #12]

	//Parity
	USARTx->CR1 |= USART_Config->Parity ;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	683a      	ldr	r2, [r7, #0]
 8000560:	7a52      	ldrb	r2, [r2, #9]
 8000562:	431a      	orrs	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	60da      	str	r2, [r3, #12]

	//Stop_Length
	USARTx->CR1 |= USART_Config->Stop_Length ;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	683a      	ldr	r2, [r7, #0]
 800056e:	7a92      	ldrb	r2, [r2, #10]
 8000570:	431a      	orrs	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60da      	str	r2, [r3, #12]


	//HW_FlowCtrl
	USARTx->CR1 |= USART_Config->HW_FlowCtrl ;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	683a      	ldr	r2, [r7, #0]
 800057c:	7ad2      	ldrb	r2, [r2, #11]
 800057e:	431a      	orrs	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	60da      	str	r2, [r3, #12]


	//IRQ_Enable
	USARTx->CR1 |= USART_Config->IRQ_Enable ;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	683a      	ldr	r2, [r7, #0]
 800058a:	7b12      	ldrb	r2, [r2, #12]
 800058c:	431a      	orrs	r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	60da      	str	r2, [r3, #12]


	/*Configuration of BRR(BaudRate Register)*/
	//PCLK1 for USART2,3
	//PCLK2 for USART1
	if (USARTx == USART1)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a35      	ldr	r2, [pc, #212]	; (800066c <UART_MCAL_Init+0x198>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d105      	bne.n	80005a6 <UART_MCAL_Init+0xd2>
	{
		PCLK = MCAL_RCC_GetPCLK2_freq();
 800059a:	f7ff ff87 	bl	80004ac <MCAL_RCC_GetPCLK2_freq>
 800059e:	4602      	mov	r2, r0
 80005a0:	4b36      	ldr	r3, [pc, #216]	; (800067c <UART_MCAL_Init+0x1a8>)
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	e004      	b.n	80005b0 <UART_MCAL_Init+0xdc>
	}
	else
	{
		PCLK = MCAL_RCC_GetPCLK1_freq();
 80005a6:	f7ff ff6d 	bl	8000484 <MCAL_RCC_GetPCLK1_freq>
 80005aa:	4602      	mov	r2, r0
 80005ac:	4b33      	ldr	r3, [pc, #204]	; (800067c <UART_MCAL_Init+0x1a8>)
 80005ae:	601a      	str	r2, [r3, #0]
	}


	BRR = USART_BRR_REGISTER(PCLK,USART_Config->BaudRate);
 80005b0:	4b32      	ldr	r3, [pc, #200]	; (800067c <UART_MCAL_Init+0x1a8>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	011b      	lsls	r3, r3, #4
 80005ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80005be:	0119      	lsls	r1, r3, #4
 80005c0:	4b2e      	ldr	r3, [pc, #184]	; (800067c <UART_MCAL_Init+0x1a8>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4613      	mov	r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	009a      	lsls	r2, r3, #2
 80005cc:	441a      	add	r2, r3
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80005d8:	4b28      	ldr	r3, [pc, #160]	; (800067c <UART_MCAL_Init+0x1a8>)
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	011b      	lsls	r3, r3, #4
 80005e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80005e6:	2064      	movs	r0, #100	; 0x64
 80005e8:	fb00 f303 	mul.w	r3, r0, r3
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	011b      	lsls	r3, r3, #4
 80005f0:	4a23      	ldr	r2, [pc, #140]	; (8000680 <UART_MCAL_Init+0x1ac>)
 80005f2:	fba2 2303 	umull	r2, r3, r2, r3
 80005f6:	095b      	lsrs	r3, r3, #5
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	430b      	orrs	r3, r1
 80005fe:	4a21      	ldr	r2, [pc, #132]	; (8000684 <UART_MCAL_Init+0x1b0>)
 8000600:	6013      	str	r3, [r2, #0]
	USARTx->BRR = BRR ;
 8000602:	4b20      	ldr	r3, [pc, #128]	; (8000684 <UART_MCAL_Init+0x1b0>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	609a      	str	r2, [r3, #8]
	/*Enable/Disable interrupt*/
	//USART_CR1
	if( USART_Config->IRQ_Enable != USART_IRQ_Enable_NONE ) //this mean user enable interrupt
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	7b1b      	ldrb	r3, [r3, #12]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d026      	beq.n	8000660 <UART_MCAL_Init+0x18c>
	{
		USARTx->CR1 |= USART_Config->IRQ_Enable;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	68db      	ldr	r3, [r3, #12]
 8000616:	683a      	ldr	r2, [r7, #0]
 8000618:	7b12      	ldrb	r2, [r2, #12]
 800061a:	431a      	orrs	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	60da      	str	r2, [r3, #12]
		//Enable interrupt for NVIC for USARTx IRQ
		if(USARTx == USART1)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <UART_MCAL_Init+0x198>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d106      	bne.n	8000636 <UART_MCAL_Init+0x162>
		{
			NVIC_IRQ37_USART1_ENABLE();
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <UART_MCAL_Init+0x1b4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a16      	ldr	r2, [pc, #88]	; (8000688 <UART_MCAL_Init+0x1b4>)
 800062e:	f043 0320 	orr.w	r3, r3, #32
 8000632:	6013      	str	r3, [r2, #0]
			NVIC_IRQ39_USART3_ENABLE();
		}

	}

}
 8000634:	e014      	b.n	8000660 <UART_MCAL_Init+0x18c>
		else if(USARTx == USART2)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <UART_MCAL_Init+0x1a0>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d106      	bne.n	800064c <UART_MCAL_Init+0x178>
			NVIC_IRQ38_USART2_ENABLE();
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <UART_MCAL_Init+0x1b4>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a11      	ldr	r2, [pc, #68]	; (8000688 <UART_MCAL_Init+0x1b4>)
 8000644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000648:	6013      	str	r3, [r2, #0]
}
 800064a:	e009      	b.n	8000660 <UART_MCAL_Init+0x18c>
		else if(USARTx == USART3)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <UART_MCAL_Init+0x1a4>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d105      	bne.n	8000660 <UART_MCAL_Init+0x18c>
			NVIC_IRQ39_USART3_ENABLE();
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <UART_MCAL_Init+0x1b4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <UART_MCAL_Init+0x1b4>)
 800065a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000001c 	.word	0x2000001c
 800066c:	40013800 	.word	0x40013800
 8000670:	40021000 	.word	0x40021000
 8000674:	40004400 	.word	0x40004400
 8000678:	40004800 	.word	0x40004800
 800067c:	20000024 	.word	0x20000024
 8000680:	51eb851f 	.word	0x51eb851f
 8000684:	20000028 	.word	0x20000028
 8000688:	e000e104 	.word	0xe000e104

0800068c <UART_MCAL_Send_Data>:
 *
 */
/**================================================================= */

void UART_MCAL_Send_Data(USART_Typedef * USARTx , uint16_t* pTXBuffer ,enum PollingMechanism PollingEn)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	4613      	mov	r3, r2
 8000698:	71fb      	strb	r3, [r7, #7]
	//Wait until TXE flag is set in SR
	if(PollingEn == Enable)
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d106      	bne.n	80006ae <UART_MCAL_Send_Data+0x22>
		while(! (USARTx->SR & (1<<7)) );
 80006a0:	bf00      	nop
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0f9      	beq.n	80006a2 <UART_MCAL_Send_Data+0x16>
	{
		USARTx->DR = (*pTXBuffer & (uint16_t)0x01FF) ;
	}
	else
	{
		USARTx->DR = (*pTXBuffer & (uint8_t)0xFF) ;
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	605a      	str	r2, [r3, #4]
	}

}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
	...

080006c4 <UART_MCAL_Recieve_Data>:
 * note -                   -none
 *
 */
/**================================================================= */
void UART_MCAL_Recieve_Data(USART_Typedef * USARTx , uint16_t* pTXBuffer ,enum PollingMechanism PollingEn)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	4613      	mov	r3, r2
 80006d0:	71fb      	strb	r3, [r7, #7]

	//Wait until RXE flag is set in SR
	if(PollingEn == Enable)
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d106      	bne.n	80006e6 <UART_MCAL_Recieve_Data+0x22>
		while(! (USARTx->SR & (1<<5)) );
 80006d8:	bf00      	nop
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0320 	and.w	r3, r3, #32
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d0f9      	beq.n	80006da <UART_MCAL_Recieve_Data+0x16>
			*((uint16_t*) pTXBuffer ) = (USARTx->DR & (uint8_t)0xFF) ;
		}


	}
	else if (GP_USART_Config->PayLoad_Length == USART_PayLoad_Length_8B)
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <UART_MCAL_Recieve_Data+0x60>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	7a1b      	ldrb	r3, [r3, #8]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d114      	bne.n	800071a <UART_MCAL_Recieve_Data+0x56>
	{
		if (GP_USART_Config->Parity == USART_Parity_NONE)
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <UART_MCAL_Recieve_Data+0x60>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	7a5b      	ldrb	r3, [r3, #9]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d107      	bne.n	800070a <UART_MCAL_Recieve_Data+0x46>
		{
			*((uint16_t*)pTXBuffer ) =(USARTx->DR & (uint8_t)0xFF) ;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	b2db      	uxtb	r3, r3
 8000702:	b29a      	uxth	r2, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	801a      	strh	r2, [r3, #0]
			*((uint16_t*) pTXBuffer ) = (USARTx->DR & (uint8_t)0x7F) ;
		}

	}

}
 8000708:	e007      	b.n	800071a <UART_MCAL_Recieve_Data+0x56>
			*((uint16_t*) pTXBuffer ) = (USARTx->DR & (uint8_t)0x7F) ;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	b29b      	uxth	r3, r3
 8000710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000714:	b29a      	uxth	r2, r3
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	801a      	strh	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	2000001c 	.word	0x2000001c

08000728 <UART_MCAL_GPIO_Set_Pins>:
 * note -                   -none
 */
/**================================================================= */

void UART_MCAL_GPIO_Set_Pins(USART_Typedef * USARTx)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

	GPIO_PIN_Configer_t PinCfg;

	if(USARTx == USART1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a6d      	ldr	r2, [pc, #436]	; (80008e8 <UART_MCAL_GPIO_Set_Pins+0x1c0>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d145      	bne.n	80007c4 <UART_MCAL_GPIO_Set_Pins+0x9c>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//TX PIN
		PinCfg.GPIO_PinNumber =GPIO_PIN_9 ;
 8000738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800073c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 800073e:	2306      	movs	r3, #6
 8000740:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 8000742:	2301      	movs	r3, #1
 8000744:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	4619      	mov	r1, r3
 800074c:	4867      	ldr	r0, [pc, #412]	; (80008ec <UART_MCAL_GPIO_Set_Pins+0x1c4>)
 800074e:	f7ff fdeb 	bl	8000328 <MCAL_GPIO_Init>

		//RX PIN
		PinCfg.GPIO_PinNumber =GPIO_PIN_10 ;
 8000752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000756:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT ;
 8000758:	2301      	movs	r3, #1
 800075a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4619      	mov	r1, r3
 8000762:	4862      	ldr	r0, [pc, #392]	; (80008ec <UART_MCAL_GPIO_Set_Pins+0x1c4>)
 8000764:	f7ff fde0 	bl	8000328 <MCAL_GPIO_Init>

		if(GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_CTS ||GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS )
 8000768:	4b61      	ldr	r3, [pc, #388]	; (80008f0 <UART_MCAL_GPIO_Set_Pins+0x1c8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	7adb      	ldrb	r3, [r3, #11]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d004      	beq.n	800077c <UART_MCAL_GPIO_Set_Pins+0x54>
 8000772:	4b5f      	ldr	r3, [pc, #380]	; (80008f0 <UART_MCAL_GPIO_Set_Pins+0x1c8>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	7adb      	ldrb	r3, [r3, #11]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d10a      	bne.n	8000792 <UART_MCAL_GPIO_Set_Pins+0x6a>

		{
			//CTX PIN
			PinCfg.GPIO_PinNumber =GPIO_PIN_11 ;
 800077c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000780:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000782:	2301      	movs	r3, #1
 8000784:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4619      	mov	r1, r3
 800078c:	4857      	ldr	r0, [pc, #348]	; (80008ec <UART_MCAL_GPIO_Set_Pins+0x1c4>)
 800078e:	f7ff fdcb 	bl	8000328 <MCAL_GPIO_Init>
		}

		if(GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_RTS ||GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS )
 8000792:	4b57      	ldr	r3, [pc, #348]	; (80008f0 <UART_MCAL_GPIO_Set_Pins+0x1c8>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	7adb      	ldrb	r3, [r3, #11]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d005      	beq.n	80007a8 <UART_MCAL_GPIO_Set_Pins+0x80>
 800079c:	4b54      	ldr	r3, [pc, #336]	; (80008f0 <UART_MCAL_GPIO_Set_Pins+0x1c8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	7adb      	ldrb	r3, [r3, #11]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	f040 809b 	bne.w	80008de <UART_MCAL_GPIO_Set_Pins+0x1b6>

		{
		//RTX PIN
		PinCfg.GPIO_PinNumber =GPIO_PIN_12 ;
 80007a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ac:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 80007ae:	2306      	movs	r3, #6
 80007b0:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 80007b2:	2301      	movs	r3, #1
 80007b4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	4619      	mov	r1, r3
 80007bc:	484b      	ldr	r0, [pc, #300]	; (80008ec <UART_MCAL_GPIO_Set_Pins+0x1c4>)
 80007be:	f7ff fdb3 	bl	8000328 <MCAL_GPIO_Init>
		MCAL_GPIO_Init(GPIOB, &PinCfg);
		}

	}

}
 80007c2:	e08c      	b.n	80008de <UART_MCAL_GPIO_Set_Pins+0x1b6>
	else if(USARTx == USART2)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a4b      	ldr	r2, [pc, #300]	; (80008f4 <UART_MCAL_GPIO_Set_Pins+0x1cc>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d140      	bne.n	800084e <UART_MCAL_GPIO_Set_Pins+0x126>
		PinCfg.GPIO_PinNumber =GPIO_PIN_2 ;
 80007cc:	2304      	movs	r3, #4
 80007ce:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 80007d0:	2306      	movs	r3, #6
 80007d2:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 80007d4:	2301      	movs	r3, #1
 80007d6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	4843      	ldr	r0, [pc, #268]	; (80008ec <UART_MCAL_GPIO_Set_Pins+0x1c4>)
 80007e0:	f7ff fda2 	bl	8000328 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber =GPIO_PIN_3 ;
 80007e4:	2308      	movs	r3, #8
 80007e6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT ;
 80007e8:	2301      	movs	r3, #1
 80007ea:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	4619      	mov	r1, r3
 80007f2:	483e      	ldr	r0, [pc, #248]	; (80008ec <UART_MCAL_GPIO_Set_Pins+0x1c4>)
 80007f4:	f7ff fd98 	bl	8000328 <MCAL_GPIO_Init>
		if(GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_CTS ||GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS )
 80007f8:	4b3d      	ldr	r3, [pc, #244]	; (80008f0 <UART_MCAL_GPIO_Set_Pins+0x1c8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	7adb      	ldrb	r3, [r3, #11]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d004      	beq.n	800080c <UART_MCAL_GPIO_Set_Pins+0xe4>
 8000802:	4b3b      	ldr	r3, [pc, #236]	; (80008f0 <UART_MCAL_GPIO_Set_Pins+0x1c8>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	7adb      	ldrb	r3, [r3, #11]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d109      	bne.n	8000820 <UART_MCAL_GPIO_Set_Pins+0xf8>
			PinCfg.GPIO_PinNumber =GPIO_PIN_0 ;
 800080c:	2301      	movs	r3, #1
 800080e:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 8000810:	2301      	movs	r3, #1
 8000812:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4619      	mov	r1, r3
 800081a:	4834      	ldr	r0, [pc, #208]	; (80008ec <UART_MCAL_GPIO_Set_Pins+0x1c4>)
 800081c:	f7ff fd84 	bl	8000328 <MCAL_GPIO_Init>
		if(GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_RTS ||GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS )
 8000820:	4b33      	ldr	r3, [pc, #204]	; (80008f0 <UART_MCAL_GPIO_Set_Pins+0x1c8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	7adb      	ldrb	r3, [r3, #11]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d004      	beq.n	8000834 <UART_MCAL_GPIO_Set_Pins+0x10c>
 800082a:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <UART_MCAL_GPIO_Set_Pins+0x1c8>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	7adb      	ldrb	r3, [r3, #11]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d154      	bne.n	80008de <UART_MCAL_GPIO_Set_Pins+0x1b6>
		PinCfg.GPIO_PinNumber =GPIO_PIN_1 ;
 8000834:	2302      	movs	r3, #2
 8000836:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 8000838:	2306      	movs	r3, #6
 800083a:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 800083c:	2301      	movs	r3, #1
 800083e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4619      	mov	r1, r3
 8000846:	4829      	ldr	r0, [pc, #164]	; (80008ec <UART_MCAL_GPIO_Set_Pins+0x1c4>)
 8000848:	f7ff fd6e 	bl	8000328 <MCAL_GPIO_Init>
}
 800084c:	e047      	b.n	80008de <UART_MCAL_GPIO_Set_Pins+0x1b6>
	else if(USARTx == USART3)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a29      	ldr	r2, [pc, #164]	; (80008f8 <UART_MCAL_GPIO_Set_Pins+0x1d0>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d143      	bne.n	80008de <UART_MCAL_GPIO_Set_Pins+0x1b6>
		PinCfg.GPIO_PinNumber =GPIO_PIN_10 ;
 8000856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 800085c:	2306      	movs	r3, #6
 800085e:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 8000860:	2301      	movs	r3, #1
 8000862:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	4619      	mov	r1, r3
 800086a:	4824      	ldr	r0, [pc, #144]	; (80008fc <UART_MCAL_GPIO_Set_Pins+0x1d4>)
 800086c:	f7ff fd5c 	bl	8000328 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber =GPIO_PIN_11 ;
 8000870:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000874:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT ;
 8000876:	2301      	movs	r3, #1
 8000878:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	4619      	mov	r1, r3
 8000880:	481e      	ldr	r0, [pc, #120]	; (80008fc <UART_MCAL_GPIO_Set_Pins+0x1d4>)
 8000882:	f7ff fd51 	bl	8000328 <MCAL_GPIO_Init>
		if(GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_CTS ||GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS )
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <UART_MCAL_GPIO_Set_Pins+0x1c8>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	7adb      	ldrb	r3, [r3, #11]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d004      	beq.n	800089a <UART_MCAL_GPIO_Set_Pins+0x172>
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <UART_MCAL_GPIO_Set_Pins+0x1c8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	7adb      	ldrb	r3, [r3, #11]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d10a      	bne.n	80008b0 <UART_MCAL_GPIO_Set_Pins+0x188>
			PinCfg.GPIO_PinNumber =GPIO_PIN_13 ;
 800089a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089e:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 80008a0:	2301      	movs	r3, #1
 80008a2:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4619      	mov	r1, r3
 80008aa:	4814      	ldr	r0, [pc, #80]	; (80008fc <UART_MCAL_GPIO_Set_Pins+0x1d4>)
 80008ac:	f7ff fd3c 	bl	8000328 <MCAL_GPIO_Init>
		if(GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_RTS ||GP_USART_Config->HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS )
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <UART_MCAL_GPIO_Set_Pins+0x1c8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	7adb      	ldrb	r3, [r3, #11]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d004      	beq.n	80008c4 <UART_MCAL_GPIO_Set_Pins+0x19c>
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <UART_MCAL_GPIO_Set_Pins+0x1c8>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	7adb      	ldrb	r3, [r3, #11]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d10c      	bne.n	80008de <UART_MCAL_GPIO_Set_Pins+0x1b6>
		PinCfg.GPIO_PinNumber =GPIO_PIN_14 ;
 80008c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008c8:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP ;
 80008ca:	2306      	movs	r3, #6
 80008cc:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M ;
 80008ce:	2301      	movs	r3, #1
 80008d0:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	4619      	mov	r1, r3
 80008d8:	4808      	ldr	r0, [pc, #32]	; (80008fc <UART_MCAL_GPIO_Set_Pins+0x1d4>)
 80008da:	f7ff fd25 	bl	8000328 <MCAL_GPIO_Init>
}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40013800 	.word	0x40013800
 80008ec:	40010800 	.word	0x40010800
 80008f0:	2000001c 	.word	0x2000001c
 80008f4:	40004400 	.word	0x40004400
 80008f8:	40004800 	.word	0x40004800
 80008fc:	40010c00 	.word	0x40010c00

08000900 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	GP_USART_Config->P_IRQ_Call_Back();
 8000904:	4b02      	ldr	r3, [pc, #8]	; (8000910 <USART1_IRQHandler+0x10>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	691b      	ldr	r3, [r3, #16]
 800090a:	4798      	blx	r3
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000001c 	.word	0x2000001c

08000914 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	GP_USART_Config->P_IRQ_Call_Back();
 8000918:	4b02      	ldr	r3, [pc, #8]	; (8000924 <USART2_IRQHandler+0x10>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	691b      	ldr	r3, [r3, #16]
 800091e:	4798      	blx	r3
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2000001c 	.word	0x2000001c

08000928 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	GP_USART_Config->P_IRQ_Call_Back();
 800092c:	4b02      	ldr	r3, [pc, #8]	; (8000938 <USART3_IRQHandler+0x10>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	691b      	ldr	r3, [r3, #16]
 8000932:	4798      	blx	r3
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000001c 	.word	0x2000001c

0800093c <__libc_init_array>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	2500      	movs	r5, #0
 8000940:	4e0c      	ldr	r6, [pc, #48]	; (8000974 <__libc_init_array+0x38>)
 8000942:	4c0d      	ldr	r4, [pc, #52]	; (8000978 <__libc_init_array+0x3c>)
 8000944:	1ba4      	subs	r4, r4, r6
 8000946:	10a4      	asrs	r4, r4, #2
 8000948:	42a5      	cmp	r5, r4
 800094a:	d109      	bne.n	8000960 <__libc_init_array+0x24>
 800094c:	f000 f81a 	bl	8000984 <_init>
 8000950:	2500      	movs	r5, #0
 8000952:	4e0a      	ldr	r6, [pc, #40]	; (800097c <__libc_init_array+0x40>)
 8000954:	4c0a      	ldr	r4, [pc, #40]	; (8000980 <__libc_init_array+0x44>)
 8000956:	1ba4      	subs	r4, r4, r6
 8000958:	10a4      	asrs	r4, r4, #2
 800095a:	42a5      	cmp	r5, r4
 800095c:	d105      	bne.n	800096a <__libc_init_array+0x2e>
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000964:	4798      	blx	r3
 8000966:	3501      	adds	r5, #1
 8000968:	e7ee      	b.n	8000948 <__libc_init_array+0xc>
 800096a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800096e:	4798      	blx	r3
 8000970:	3501      	adds	r5, #1
 8000972:	e7f2      	b.n	800095a <__libc_init_array+0x1e>
 8000974:	080009b4 	.word	0x080009b4
 8000978:	080009b4 	.word	0x080009b4
 800097c:	080009b4 	.word	0x080009b4
 8000980:	080009b8 	.word	0x080009b8

08000984 <_init>:
 8000984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000986:	bf00      	nop
 8000988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800098a:	bc08      	pop	{r3}
 800098c:	469e      	mov	lr, r3
 800098e:	4770      	bx	lr

08000990 <_fini>:
 8000990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000992:	bf00      	nop
 8000994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000996:	bc08      	pop	{r3}
 8000998:	469e      	mov	lr, r3
 800099a:	4770      	bx	lr
